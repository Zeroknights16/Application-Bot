/* eslint-disable no-var */
const fs = require('fs');
const Discord = require('discord.js');
const { prefix, Youtubekey, development, server, picture, serverip, version } = require('./database/setup/config.json');
const chalk = require('chalk');
const consoleerror = chalk.bold.red;
const consolewords = chalk.keyword('white');
const consolecommands = chalk.keyword('cyan');
const consoleerrcmds = chalk.keyword('yellow');
const consolestart = chalk.keyword('red');
const consolestartcmd = chalk.keyword('orange');

const client = new Discord.Client();
client.commands = new Discord.Collection();

const commandFiles = fs.readdirSync('./commands').filter(file => file.endsWith('.js'));

for (const file of commandFiles) {
	const command = require(`./commands/${file}`);
	client.commands.set(command.name, command);

}


const cooldowns = new Discord.Collection();

client.once('ready', () => {

	console.log(consolewords('[INFO]: ') + consolestart('\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'));
	console.log(consolewords('[INFO]: ') + consolestart('\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'));
	console.log(consolewords('[INFO]: ') + consolestart('\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'));
	console.log(consolewords('[INFO]: ') + consolestart(`\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\  Starting  Ice Ticket Bot (Version ${version})  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\`));
	console.log(consolewords('[INFO]: ') + consolestart('\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'));
	console.log(consolewords('[INFO]: ') + consolestart('\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'));
	console.log(consolewords('[INFO]: ') + consolestart('\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'));
	console.log(consolewords('[INFO]: ') + consolestartcmd(`Logged in as ${client.user.tag}`));
	console.log(consolewords('[INFO]: ') + consolestartcmd('Loading all commands...'));

	var namelist = '';
	var versions = '';

	// eslint-disable-next-line no-unused-vars
	const result = commandFiles.forEach((f) => {
		const props = require(`./commands/${f}`);
		namelist = props.name;
		versions = props.version;

		console.log(consolewords('[INFO]: ') + consoleerrcmds(`Successfully loaded command ${namelist} (Version: ${versions})`));
	});
	console.log(consolewords('[INFO]: ') + consolestartcmd('Loading all functions...'));
	console.log(consolewords('[INFO]: ') + consoleerrcmds('Successfully loaded function transcript (Version: 3.0)'));
	console.log(consolewords('[INFO]: ') + consolestartcmd('The bot has succesfully logged on!'));
	client.channels.cache.get('804354100581105694')
		.send(`${prefix}purge 3`);
	client.channels.cache.get('804354100581105694')
		.send(`${prefix}ticketpanel`);
});
const transcript = require('./transcript.js');
transcript(client, `${prefix}transcript`, 500);

const activities_list = [
	`${prefix}help`,
	`${serverip}`,
	'Made by Ice Development',
];

client.on('ready', () => {
	setInterval(() => {
		const index = Math.floor(Math.random() * (activities_list.length - 1) + 1);
		client.user.setActivity(activities_list[index]);
	}, 10000);
});
client.on('message', message => {

	if (!message.content.startsWith(prefix)) return;

	const args = message.content.slice(prefix.length).trim().split(/ +/);
	const commandName = args.shift().toLowerCase();

	const command = client.commands.get(commandName)
		|| client.commands.find(cmd => cmd.aliases && cmd.aliases.includes(commandName));

	if (!command) return;

	if (command.guildOnly && message.channel.type === 'dm') {
		return message.reply('I can\'t execute that command inside DMs!');
	}

	if (command.args && !args.length) {
		let reply = `You didn't provide any arguments, ${message.author}`;

		if (command.usage) {
			reply += `\nThe proper usage would be: \`${prefix}${command.name} ${command.usage}\``;
		}

		return message.channel.send(reply);
	}

	if (!cooldowns.has(command.name)) {
		cooldowns.set(command.name, new Discord.Collection());
	}

	const now = Date.now();
	const timestamps = cooldowns.get(command.name);
	const cooldownAmount = (command.cooldown || 3) * 1000;

	if (timestamps.has(message.author.id)) {
		const expirationTime = timestamps.get(message.author.id) + cooldownAmount;

		if (now < expirationTime) {
			const timeLeft = (expirationTime - now) / 1000;
			return message.reply(`please wait ${timeLeft.toFixed(1)} more second(s) before reusing the \`${command.name}\` command.`);
		}
	}

	timestamps.set(message.author.id, now);
	setTimeout(() => timestamps.delete(message.author.id), cooldownAmount);

	try {
		command.execute(message, args);
	}
	catch (error) {
		console.error(consolewords('[ERROR]: ') + consoleerror(error));
		message.reply('there was an error trying to execute that command!');
	}
});
client.on('message', message => {
	if (message.content == `${prefix}uptime`) {

		const days = Math.floor(client.uptime / 86400000);
		const hours = Math.floor(client.uptime / 3600000) % 24;
		const minutes = Math.floor(client.uptime / 60000) % 60;
		const seconds = Math.floor(client.uptime / 1000) % 60;

		message.channel.send(`**${server} Discord Bot Uptime:**\n${days}d ${hours}h ${minutes}m ${seconds}s`);
		console.log(consolewords('[CMD]: ') + consolecommands(`${message.author.username}: ${prefix}uptime`));
	}
});
client.on('messageReactionAdd', async (reactionReaction, user) => {

	const message = reactionReaction.message;
	const verifyChannel = message.guild.channels.cache.get('804354100581105694');
	const memberid = message.guild.members.cache.get(user.id);
	const use = message.guild.members.cache.get(user.id).displayName;
	const guild = message.guild;
	const ticketlog = JSON.parse(fs.readFileSync('./database/tickets/tickets.json', 'utf8'));
	const ticketnum = JSON.parse(fs.readFileSync('./database/tickets/ticketnumber.json', 'utf8'));
	const blacklists = JSON.parse(fs.readFileSync('./database/tickets/blacklist.json', 'utf8'));
	const tickets = JSON.parse(fs.readFileSync('./database/tickets/ticketcreations.json', 'utf8'));

	if (!blacklists[user.id]) {
		blacklists[user.id] = {
			blacklisted: 'No',
			ID: `${user.id}`,
		};
		await fs.writeFile('./database/tickets/blacklist.json', JSON.stringify(blacklists), (err) => {
			if (err) console.log(err);
		});
	}

	if (!tickets[user.id]) {
		tickets[user.id] = {
			number: 0,
		};
		await fs.writeFile('./database/tickets/ticketcreations.json', JSON.stringify(tickets), (err) => {
			if (err) console.log(err);
		});
	}

	try {
		const taggedUser = message.guild.members.cache.get(blacklists[user.id].ID);
		if (blacklists[user.id].blacklisted == 'Yes') {
			const exampleEmbed = new Discord.MessageEmbed()
				.setColor('RED')
				.setTitle('You are blacklisted from the ticket system!')
				.setDescription(`> **User**: \`\`${user.username}\`\`\n> **ID**: \`\`${user.id}\`\`\n\n_If you want to appeal message an Admin+_`)
				.setTimestamp()
				.setFooter(`${server} Tickets`, `${picture}`);
			taggedUser.send(exampleEmbed);
			reactionReaction.users.remove(memberid).catch(console.error);
			return;
		}
	}
	catch (err) {
		console.log(err);
	}
	if (memberid.user.bot) return;
	if (reactionReaction.emoji.name === '🧨' && message.channel.id === verifyChannel.id ||
		reactionReaction.emoji.name === '🍃' && message.channel.id === verifyChannel.id ||
		reactionReaction.emoji.name === '💶' && message.channel.id === verifyChannel.id ||
		reactionReaction.emoji.name === '⛔' && message.channel.id === verifyChannel.id ||
		reactionReaction.emoji.name === '💥' && message.channel.id === verifyChannel.id ||
		reactionReaction.emoji.name === '👮' && message.channel.id === verifyChannel.id ||
		reactionReaction.emoji.name === '❓' && message.channel.id === verifyChannel.id) {

		if (!ticketnum[reactionReaction.emoji.name]) {
			ticketnum[reactionReaction.emoji.name] = {
				name: 0,
			};
			await fs.writeFile('./database/tickets/ticketnumber.json', JSON.stringify(ticketnum), (err) => {
				if (err) console.log(err);
			});
		}

		await guild.channels.create(`ticket-${ticketnum[reactionReaction.emoji.name].name}-${reactionReaction.emoji.name}`, {
			type: 'text',
			parent: '804354053877792838',
			permissionOverwrites: [
				{
					id: user.id,
					allow: ['VIEW_CHANNEL', 'SEND_MESSAGES', 'ATTACH_FILES', 'CREATE_INSTANT_INVITE', 'EMBED_LINKS', 'READ_MESSAGE_HISTORY'],
					deny: ['MANAGE_CHANNELS', 'ADD_REACTIONS', 'MANAGE_MESSAGES', 'MENTION_EVERYONE', 'MANAGE_ROLES', 'SEND_TTS_MESSAGES', 'USE_EXTERNAL_EMOJIS', 'MANAGE_WEBHOOKS'],
				},
				{
					id: '804354022612926515',
					allow: ['VIEW_CHANNEL', 'SEND_MESSAGES', 'ATTACH_FILES', 'READ_MESSAGE_HISTORY', 'EMBED_LINKS', 'CREATE_INSTANT_INVITE', 'MENTION_EVERYONE', 'ADD_REACTIONS'],
					deny: ['MANAGE_CHANNELS', 'SEND_TTS_MESSAGES', 'MANAGE_MESSAGES', 'MANAGE_ROLES', 'USE_EXTERNAL_EMOJIS', 'MANAGE_WEBHOOKS'],
				},
				{
					id: '804354028419022888',
					deny: ['VIEW_CHANNEL', 'SEND_MESSAGES', 'ATTACH_FILES', 'CREATE_INSTANT_INVITE', 'EMBED_LINKS', 'READ_MESSAGE_HISTORY', 'MANAGE_CHANNELS', 'ADD_REACTIONS', 'SEND_TTS_MESSAGES', 'MANAGE_MESSAGES', 'MENTION_EVERYONE', 'USE_EXTERNAL_EMOJIS', 'MANAGE_ROLES', 'MANAGE_WEBHOOKS'],
				},
				{
					id: '804354037662220289',
					deny: ['VIEW_CHANNEL', 'SEND_MESSAGES', 'ATTACH_FILES', 'CREATE_INSTANT_INVITE', 'EMBED_LINKS', 'READ_MESSAGE_HISTORY', 'MANAGE_CHANNELS', 'ADD_REACTIONS', 'SEND_TTS_MESSAGES', 'MANAGE_MESSAGES', 'MENTION_EVERYONE', 'USE_EXTERNAL_EMOJIS', 'MANAGE_ROLES', 'MANAGE_WEBHOOKS'],
				},
				{
					id: '804354029076348959',
					allow: ['VIEW_CHANNEL', 'SEND_MESSAGES', 'MANAGE_ROLES', 'MANAGE_MESSAGES', 'ATTACH_FILES', 'SEND_TTS_MESSAGES', 'READ_MESSAGE_HISTORY', 'EMBED_LINKS', 'CREATE_INSTANT_INVITE', 'MENTION_EVERYONE', 'USE_EXTERNAL_EMOJIS', 'ADD_REACTIONS'],
					deny: ['MANAGE_CHANNELS', 'MANAGE_WEBHOOKS', 'MANAGE_ROLES'],
				},
				{
					id: '804354019455139900',
					allow: ['VIEW_CHANNEL', 'SEND_MESSAGES', 'ATTACH_FILES', 'CREATE_INSTANT_INVITE', 'EMBED_LINKS', 'READ_MESSAGE_HISTORY', 'MANAGE_CHANNELS', 'ADD_REACTIONS', 'SEND_TTS_MESSAGES', 'MANAGE_MESSAGES', 'MENTION_EVERYONE', 'USE_EXTERNAL_EMOJIS', 'MANAGE_ROLES', 'MANAGE_WEBHOOKS'],
				},
			],
		}).then(channel => ticketlog[channel.id] = {
			id: user.id,
		},
		);
		fs.writeFile('./database/tickets/tickets.json', JSON.stringify(ticketlog), (err) => {
			if (err) console.log(err);
		});

		ticketnum[reactionReaction.emoji.name].name++;
		fs.writeFile('./database/tickets/ticketnumber.json', JSON.stringify(ticketnum), (err) => {
			if (err) console.log(err);
		});

		tickets[user.id].number++;
		fs.writeFile('./database/tickets/ticketcreations.json', JSON.stringify(tickets), (err) => {
			if (err) console.log(err);
		});

		await reactionReaction.users.remove(memberid).catch(console.error);
		console.log(consolewords('[CMD]: ') + consolecommands(`${use} opened a ticket!`));
	}
});

client.on('channelCreate', (channel) => {

	if (channel.type === 'voice') {
		return;
	}
	if (channel.type === 'dm') {
		return;
	}
	if (!channel.name.startsWith('ticket')) {
		return;
	}

	const ticketchannel = JSON.parse(fs.readFileSync('./database/tickets/ticketchannel.json', 'utf8'));
	const errorArgsEmbed = new Discord.MessageEmbed()
		.setColor('GREEN')
		.setTitle('Ticket Creation')
		.setDescription('Thank you for creating a ticket. A staff member will be with you soon. In the meantime answer the following questions please:\n\n> ``What is your IGN?``\n> ``On which realm are you playing?``\n> ``What\'s your problem?``\n\nNote: Please do not tag any staff member. This will result in closing this ticket immediately.')
		.setTimestamp()
		.setFooter(`${server} Discord Bot`, `${picture}`);
	channel.send({ embed: errorArgsEmbed });

	ticketchannel[channel.id] = {
		ticket: 'Yes',
	},
	fs.writeFile('./database/tickets/ticketchannel.json', JSON.stringify(ticketchannel), (err) => {
		if (err) console.log(err);
	});

});

client.login('NzUzMjUwNzczMjczNjczODEx.X1jdcw.iKPaayN6tuBerxZySxEcK7Fr7FI');